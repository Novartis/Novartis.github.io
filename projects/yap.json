{"slug":"yap","metadata":{"name":"Yet Another Pipeline","abbreviation":"YAP","projectName":"yap","launched":"2014-11-06T00:00:00.000Z","icon":"yap_logo.png","summary":"YAP allows researchers to quickly build high throughput big data pipelines without extensive\nknowledge of parallel programming.\n","description":"<p>YAP is an extensible parallel framework, written in Python using <a href=\"http://www.open-mpi.org/\">OpenMPI</a> libraries. It\nallows researchers to quickly build high throughput big data pipelines without extensive knowledge of parallel\nprogramming. The user interacts with the framework through simple configuration files to capture analysis parameters\nand user directed metadata, enabling reproducible research. Using YAP, analysts have been able to achieve a\nsignificant speed up of up to 36× in <a href=\"https://en.wikipedia.org/wiki/RNA-Seq\">RNASeq</a> workflow execution time.</p>\n<p>YAP has been designed to be scalable and flexible. We have implemented YAP with a focus on next-generation sequencing\n(NGS), to meet the large data processing challenges at NIBR. However, the framework can be easily adapted for any kind\nof analysis. It can be executed on your local Linux workstations or large HPC cluster systems. The framework achieves\nefficiency by implementing optimal data handling mechanisms such as, parallel data distribution, avoiding file I/O\nusing data streams and named pipes.</p>\n","dateString":"Thu Nov 06 2014","title":"Yet Another Pipeline","styles":[],"scripts":[]},"html":"\n<h2> YAP compared to analysts' scripts </h2>\n<table>\n  <thead>\n    <tr>\n      <th>Analysis</th>\n      <th>Data size</th>\n      <th>Number of cores</th>\n      <th>Analyst methods (hrs)</th>\n      <th>YAP (hrs)</th>\n      <th>Speed-up</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>RNASeq QC and Counts</th>\n      <td>3 billion reads (150 samples)</td>\n      <td>500</td>\n      <td>325.6</td>\n      <td>9</td>\n      <td>\n        36&times;\n      </td>\n    </tr>\n    <tr>\n      <th>Bacterial studies using Mothur</th>\n      <td>230,000 reads</td>\n      <td>72</td>\n      <td>90</td>\n      <td>12</td>\n      <td>8&times;</td>\n    </tr>\n    <tr>\n      <th>ChIPSeq Peak Calls</th>\n      <td>190 million reads (6 samples)</td>\n      <td>12</td>\n      <td>9.3</td>\n      <td>4.5</td>\n      <td>2&times;</td>\n    </tr>\n    <tr>\n      <th>EQP</th>\n      <td>400 million reads (5 samples)</td>\n      <td>60</td>\n      <td>45</td>\n      <td>12</td>\n      <td>4&times;</td>\n    </tr>\n  </tbody>\n</table>\n\n<div class=\"container\" style=\"text-align:center;\">\n  <div class=\"row\">\n    <div class=\"col-sm-3\"></div>\n    <div class=\"col-sm-6\">\n      <table class=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th></th>\n            <th>Traditional method</th>\n            <th>YAP</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>I/O steps</th>\n            <td>1400 file reads<br>1200 file writes</td>\n            <td>200 file reads<br>800 file writes</td>\n          </tr>\n          <tr>\n            <th>Jobs spawned</th>\n            <td>1500</td>\n            <td>1 MPI job</td>\n          </tr>\n          <tr>\n            <td colspan=3>\n              File-based reads reduced by <span class=\"label label-success\">70%</span>\n              <br>\n              File-based writes reduced by <span class=\"label label-success\">30%</span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n<h2> Example Analysis Output </h2>\n<p>\n\n  The following images are the results of various applications run within the\n  YAP framework, such as FastQC, FastQScreen, PicardTools, etc.\n\n</p>\n<img src=\"/projects/yap/images/sample_output_images.png\" class=\"scale-image\">\n\n<p>\n\n  <strong>YAP consolidates results from across the samples for the various\n      packages, such as gene counts from HTSeq and normalized counts from Cufflinks.</strong>\n\n</p>\n\n<div class=\"row\">\n  <div class=\"col-md-6\">\n    <h5>HTSeq gene counts</h5>\n    <table class='table table-striped table-bordered'>\n        <thead>\n          <tr>\n            <th>\n              SAMPLE\n            </th>\n            <th>\n              CR560274_1\n            </th>\n            <th>\n              CR560457_1\n            </th>\n            <th>\n              CR560502_1\n            </th>\n            <th>\n              CR560562_1\n            </th>\n            <th>...</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              NM_000014\n            </td>\n            <td>\n              34\n            </td>\n            <td>\n              13\n            </td>\n            <td>\n              35\n            </td>\n            <td>\n              34\n            </td>\n            <td></td>\n          </tr>\n          <tr>\n            <td>\n              NM_000015\n            </td>\n            <td>\n              2\n            </td>\n            <td>\n              1\n            </td>\n            <td>\n              1\n            </td>\n            <td>\n              1\n            </td>\n            <td></td>\n          </tr>\n          <tr>\n            <td>\n              NM_000016\n            </td>\n            <td>\n              0\n            </td>\n            <td>\n              0\n            </td>\n            <td>\n              0\n            </td>\n            <td>\n              0\n            </td>\n            <td></td>\n          </tr>\n          <tr>\n            <td>\n              NM_000017\n            </td>\n            <td>\n              27\n            </td>\n            <td>\n              11\n            </td>\n            <td>\n              9\n            </td>\n            <td>\n              3\n            </td><td></td>\n          </tr>\n\n          <tr><td>NM_000018</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr>\n          <tr><td>NM_000019</td><td>18</td><td>48</td><td>17</td><td>14</td><td></td></tr>\n<tr><td>NM_000020</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr>\n<tr><td>NM_000021</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr>\n\n          <tr>\n            <td>&#x22ee;</td><td></td><td></td><td></td><td></td><td>&#x22f1;</td>\n          </tr>\n        </tbody>\n      </table>\n  </div>\n  <div class=\"col-md-6\">\n    <h5> Normalized counts from Cufflinks </h5>\n    <table class='table table-striped table-bordered'>\n      <tbody>\n          <tr style=\"font-weight: bold;\">\n            <td>\n              SAMPLE\n            </td>\n            <td colspan=2>\n              CR560274_1\n            </td>\n            <td colspan=2>\n              CR560457_1\n            </td>\n            <td colspan=2>\n              CR560502_1\n            </td>\n          <td>...</td></tr>\n          <tr style=\"font-weight: bold;\">\n            <td>\n              TRACKING_ID\n            </td>\n            <td>\n              FPKM\n            </td>\n            <td>\n              FPKM_Status\n            </td>\n            <td>\n              FPKM\n            </td>\n            <td>\n              FPKM_Status\n            </td>\n            <td>\n              FPKM\n            </td>\n            <td class=\"td10\">\n              FPKM_Status\n            </td>\n          <td></td></tr>\n          <tr>\n            <td>\n              NM_000014<br>|chr12:9220303-9268558|\n            </td>\n            <td>\n              0.187039\n            </td>\n            <td>\n              OK\n            </td>\n            <td>\n              0\n            </td>\n            <td>\n              OK\n            </td>\n            <td>\n              0.134608\n            </td>\n            <td class=\"td10\">\n              OK\n            </td>\n          <td></td></tr>\n          <tr>\n            <td>\n              NM_000015<br>|chr8:18248754-18258723|\n            </td>\n            <td>\n              0.218917\n            </td>\n            <td>\n              OK\n            </td>\n            <td>\n              0.152739\n            </td>\n            <td>\n              OK\n            </td>\n            <td>\n              0.13776\n            </td>\n            <td class=\"td10\">\n              OK\n            </td>\n          <td></td></tr>\n          <tr>\n            <td>\n              NM_000016<br>|chr1:76190042-76229355|\n            </td>\n            <td>\n              2.02618\n            </td>\n            <td>\n              OK\n            </td>\n            <td>\n              8.25528\n            </td>\n            <td>\n              OK\n            </td>\n            <td>\n              1.7346\n            </td>\n            <td class=\"td10\">\n              OK\n            </td>\n          <td></td></tr>\n          <tr><td>\n            NM_000017<br>|chr12:121163570-121177811|</td><td>1.40608</td><td>OK</td><td>0.980779</td><td>OK</td><td>0.708088</td><td>OK\n            </td><td></td></tr>\n              <tr>\n              <td>⋮</td><td></td><td></td><td></td><td></td><td></td><td></td><td>⋱</td>\n            </tr>\n            </tbody>\n          </table>\n\n  </div><!-- col-md-4 -->\n</div><!-- row -->\n\n<div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4\">\n  <h2> Reproducible research </h2>\n\n  Here's an example of the metadata automatically collected during a YAP run. By\n  storing the commands and parameters used to run the job, YAP allows\n  scientists to reproduce their analysis results at later points.\n\n</div>\n<div class=\"col-xs-8\" style=\"max-height: 600px; overflow-y: scroll;\">\n  <code><pre style=\"background-color: #111; color: #aaa;\">\n------------------------------ YAP ANALYSIS SUMMARY FOR WORKFLOW = yap2.3_test ------------------------------\n<span style=\"color:white;\">Operating System Information= Linux yourhostname 2.6.18-371.9.1.el5#1 SMP Tue May 13 06:52:49 EDT 2014x86_64\nUSER= my_user\nYAP SOURCE= /YAP/opensource/\nPython Source= 2.7.5 (default, Sep 10 2013, 17:21:36)  [GCC 4.1.2 20080704 (Red Hat 4.1.2-54)]\nAnalysis Start Time For Workflow : yap2.3_test 2014/09/04 15:55:44\nYAP analysis general metadata:\n1.comment:120 chars\n2.analyst_name:120 chars\n3.organisation_name:NIBR\nInstrument Type= Illumina\nSpecimen Information= [tissue type]\nWorkflow type= rnaseq\nNumber of input files= 2\nNumber of processors= 6\nInput files path for the workflow= /examples/sample_input\nInput file provided:\n1.RN0000108D_1 => /examples/sample_input/RN0000108D_1.fq\n\t\t  /examples/sample_input/RN0000108D_2.fq\n\nOutput file path for the workflow= /test_output/yap2.3_test\nSequence data type= paired end\nInput file format= fastq\nMaximum read length= 150\nFile chunk size (in megabytes)= 1024\nData distribution method=chunk_based\nOutput file path= /test_output/\n-------------------------------------------------------------------------------------------------------------\nAnalysis stages :\nPreprocess analysis= yes\nReference Sequence Alignment=yes\nPostprocess Analysis= yes\n-------------------------------------------------------------------------------------------------------------\nPreprocess Analysis commands:\nBarcodes information:\nno_barcode_specified :\n1. command name= fastq_screen,command line= /packages/FastQScreen/v0.4.1/fastq_screen --subset 500000 --paired --outdir output_directory --conf fastq_screen_v0.4.1.conf --aligner bowtie\n2. command name= fastqc,command line= /packages/fastqc/0.10.1/fastqc --outdir output_directory --extract --threads 12\n-------------------------------------------------------------------------------------------------------------\nAligner commands:\n1. command name= bowtie,command line= /packages/bowtie/1.0.0/bowtie  /accessory_files/indexes/bowtie/hg19 -q -v 2 -k 10 -m 10 --best -S -p 8 -1 pipe1 -2 pipe2  >output_file.sam\nAlignment output data sort order= both\n-------------------------------------------------------------------------------------------------------------\nSamples re-grouped in this workflow:\nNone.\n-------------------------------------------------------------------------------------------------------------\nPotprocess analysis commands:\n1. command type= :begin\n\tcommand input : ['input_file_type *junctions.bed*', 'input_directory aligner_output']\n\t1. command name= yap_junction_count,command line= yap_junction_count -exon_coordinates_file /accessory_files/human-ucsc-final_exon_coord.bed -exon_CoordToNumber_file /accessory_files/human-ucsc-final_exon_coord_number.bed -i - -o output_file\n2. command type= :begin\n\tcommand input : ['input_file_type *queryname*.sam', 'input_directory aligner_output']\n\t1. command name= htseq-count,command line= /packages/python/2.6.5_gnu/bin/htseq-count -s no -q  file_based_input  /accessory_files/human-ucsc-refGene.gtf  >output_file.out\n3. command type= :begin_tee\n\tcommand input : ['input_directory aligner_output', 'input_file_type *coordinate*']\n\t1. command name= yap_exon_count,command line= yap_exon_count -f 1.0 -exon_coordinates_file /accessory_files/human-ucsc-final_exon_coord.bed -exon_CoordToNumber_file /accessory_files/human-ucsc-final_exon_coord_number.bed -i - -o output_file\n\t2. command name= CollectAlignmentSummaryMetrics,command line= java -Xmx1g -jar /packages/picard-tools/1.89/CollectAlignmentSummaryMetrics.jar VALIDATION_STRINGENCY= SILENT I= /dev/stdin O= output_file.txt IS_BISULFITE_SEQUENCED= true ASSUME_SORTED= True REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa QUIET= True\n\t3. command name= QualityScoreDistribution,command line= java -Xmx1g -jar /packages/picard-tools/1.89/QualityScoreDistribution.jar VALIDATION_STRINGENCY= SILENT I= /dev/stdin O= output_file.txt ASSUME_SORTED= true REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa CHART= output_file.pdf ALIGNED_READS_ONLY= true\n\t4. command name= MeanQualityByCycle,command line= java -Xmx1g -jar /packages/picard-tools/1.89/MeanQualityByCycle.jar VALIDATION_STRINGENCY= SILENT ASSUME_SORTED= true REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa I= /dev/stdin O= output_file.txt CHART= output_file.pdf ALIGNED_READS_ONLY= true\n\t5. command name= CollectGcBiasMetrics,command line= java -Xmx1g -jar /packages/picard-tools/1.89/CollectGcBiasMetrics.jar VALIDATION_STRINGENCY= SILENT I= /dev/stdin O= output_file.txt SUMMARY_OUTPUT= output_file_summary.txt CHART= output_file.pdf ASSUME_SORTED= true REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa\n\t6. command name= CollectRnaSeqMetrics,command line= java -Xmx1g -jar  /packages/picard-tools/1.89/CollectRnaSeqMetrics.jar VALIDATION_STRINGENCY= SILENT ASSUME_SORTED= true REF_FLAT= /db/yap/ucsc/may_02_2013/gtf/hg19/human_refflat_for_picard.gff RIBOSOMAL_INTERVALS= /db/yap/ucsc/may_02_2013/gtf/hg19/Homo_sapiens_assembly19.rRNA.interval_list STRAND_SPECIFICITY= NONE I= /dev/stdin O= output_file.txt CHART_OUTPUT= output_file.pdf REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa\n\t7. command name= CalculateHsMetrics,command line= /packages/picard-tools/1.89/CalculateHsMetrics.jar VALIDATION_STRINGENCY= SILENT BAIT_INTERVALS= /accessory_files/TruSeq_exome_targeted_regions_for_picard.bed TARGET_INTERVALS= /accessory_files/TruSeq_exome_targeted_regions_for_picard.bed INPUT= /dev/stdin OUTPUT= output_file.txt REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa\n\t8. command name= CollectTargetedPcrMetrics,command line= java -Xmx1g -jar /packages/picard-tools/1.89/CollectTargetedPcrMetrics.jar VALIDATION_STRINGENCY= SILENT AMPLICON_INTERVALS= /accessory_files/TruSeq_exome_targeted_regions_for_picard.bed TARGET_INTERVALS= /accessory_files/TruSeq_exome_targeted_regions_for_picard.bed INPUT= /dev/stdin OUTPUT= output_file.txt REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa\n4. command type= :begin\n\tcommand input : ['input_file_type *coordinate*', 'input_directory aligner_output']\n\t1. command name= CollectInsertSizeMetrics,command line= java -Xmx1g -jar  /packages/picard-tools/1.89/CollectInsertSizeMetrics.jar VALIDATION_STRINGENCY= SILENT ASSUME_SORTED= true I= file_based_input O= output_file.txt H= output_file.pdf TMP_DIR= /scratch/$USER HISTOGRAM_WIDTH= 500\n5. command type= :begin\n\tcommand input : ['input_file_type *coordinate*', 'input_directory aligner_output']\n\t1. command name= MarkDuplicates,command line= java -Xmx1g -jar  /packages/picard-tools/1.89/MarkDuplicates.jar VALIDATION_STRINGENCY= SILENT TMP_DIR= /scratch/$USER MAX_RECORDS_IN_RAM= 1000000 MAX_SEQUENCES_FOR_DISK_READ_ENDS_MAP= 2000 ASSUME_SORTED= true I= file_based_input O= output_file.bam METRICS_FILE= output_file.txt\n6. command type= :begin\n\tcommand input : ['input_file_type *coordinate*', 'input_directory aligner_output']\n\t1. command name= cufflinks,command line= /packages/cufflinks/2.1.1/cufflinks  file_based_input -o output_directory -p 12 -G /accessory_files/human-ucsc-refGene.gtf\n-------------------------------------------------------------------------------------------------------------\n\n******************* YAP CHECK SUMMARY *******************\n* --Syntax check          : Passed                      *\n* --Compatibility check   : Passed                      *\n* --File paths check      : Passed With Warnings        *\n*********************************************************\n* YAP Configuration overall check status: Passed With Warnings</span>\n\n--------------------------------------- YAP Check Error/Warning Info ---------------------------------------\n-------------------------------------------------------------------------------------------------------------\n--YAP Configuration File paths check status: Passed With Warnings\nWarning: At Line: 21 in file: bowtie_1.0.0_configuration.cfg. Files were found using basename in /db/nibrgenome/NG00006.0/indexes/bowtie/hg19. Please make sure that command: bowtie can work with basenames.\n\n\n-------------------------------------------------------------------------------------------------------------\n-------------------------- YAP configurations check end for Workflow = yap2.3_test --------------------------\n-------------------- PROVENANCE --------------------\n\nPREPROCESS:\n\n\t/packages/FastQScreen/v0.4.1/fastq_screen --subset 500000 --paired --outdir /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/preprocess_output --conf fastq_screen_v0.4.1.conf --aligner bowtie /db/yap/benchmark/robin_50_samples/RN0000108D_1.fq /db/yap/benchmark/robin_50_samples/RN0000108D_2.fq\n\n\t/packages/fastqc/0.10.1/fastqc --outdir /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/preprocess_output --extract --threads 12 /db/yap/benchmark/robin_50_samples/RN0000108D_1.fq /db/yap/benchmark/robin_50_samples/RN0000108D_2.fq\n\nALIGNMENT :\n\n\tINPUT: /db/yap/benchmark/robin_50_samples/RN0000108D_1.fq and /db/yap/benchmark/robin_50_samples/RN0000108D_2.fq chunk number= 0\n\n\t/packages/bowtie/1.0.0/bowtie  /db/nibrgenome/NG00006.0/indexes/bowtie/hg19 -q -v 2 -k 10 -m 10 --best -S -p 8 -1  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000003008281_0.797636572311_pipe_0_0_1  -2  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000003008281_0.797636572311_pipe_0_0_2   >/test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000000.sam\n\n\tsamtools view -bhS - samtools sort -on -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000000_queryname | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000000_queryname.sam\n\n\tsamtools view -bhS - samtools sort -o -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000000_coordinate | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000000_coordinate.sam\n\n\tINPUT: /db/yap/benchmark/robin_50_samples/RN0000108D_1.fq and /db/yap/benchmark/robin_50_samples/RN0000108D_2.fq chunk number= 1\n\n\t/packages/bowtie/1.0.0/bowtie  /db/nibrgenome/NG00006.0/indexes/bowtie/hg19 -q -v 2 -k 10 -m 10 --best -S -p 8 -1  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000013008281_0.797636572311_pipe_1_0_1  -2  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000013008281_0.797636572311_pipe_1_0_2   >/test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000001.sam\n\n\tsamtools view -bhS - samtools sort -on -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000001_queryname | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000001_queryname.sam\n\n\tsamtools view -bhS - samtools sort -o -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000001_coordinate | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000001_coordinate.sam\n\n\tINPUT: /db/yap/benchmark/robin_50_samples/RN0000108D_1.fq and /db/yap/benchmark/robin_50_samples/RN0000108D_2.fq chunk number= 2\n\n\t/packages/bowtie/1.0.0/bowtie  /db/nibrgenome/NG00006.0/indexes/bowtie/hg19 -q -v 2 -k 10 -m 10 --best -S -p 8 -1  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000023008281_0.797636572311_pipe_2_0_1  -2  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000023008281_0.797636572311_pipe_2_0_2   >/test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000002.sam\n\n\tsamtools view -bhS - samtools sort -on -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000002_queryname | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000002_queryname.sam\n\n\tsamtools view -bhS - samtools sort -o -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000002_coordinate | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000002_coordinate.sam\n\n\tINPUT: /db/yap/benchmark/robin_50_samples/RN0000108D_1.fq and /db/yap/benchmark/robin_50_samples/RN0000108D_2.fq chunk number= 3\n\n\t/packages/bowtie/1.0.0/bowtie  /db/nibrgenome/NG00006.0/indexes/bowtie/hg19 -q -v 2 -k 10 -m 10 --best -S -p 8 -1  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000033008281_0.797636572311_pipe_3_0_1  -2  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000033008281_0.797636572311_pipe_3_0_2   >/test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000003.sam\n\n\tsamtools view -bhS - samtools sort -on -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000003_queryname | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000003_queryname.sam\n\n\tsamtools view -bhS - samtools sort -o -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000003_coordinate | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000003_coordinate.sam\n\n\tINPUT: /db/yap/benchmark/robin_50_samples/RN0000108D_1.fq and /db/yap/benchmark/robin_50_samples/RN0000108D_2.fq chunk number= 4\n\n\t/packages/bowtie/1.0.0/bowtie  /db/nibrgenome/NG00006.0/indexes/bowtie/hg19 -q -v 2 -k 10 -m 10 --best -S -p 8 -1  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000043008281_0.797636572311_pipe_4_0_1  -2  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000043008281_0.797636572311_pipe_4_0_2   >/test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000004.sam\n\n\tsamtools view -bhS - samtools sort -on -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000004_queryname | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000004_queryname.sam\n\n\tsamtools view -bhS - samtools sort -o -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000004_coordinate | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000004_coordinate.sam\n\n\tINPUT: /db/yap/benchmark/robin_50_samples/RN0000108D_1.fq and /db/yap/benchmark/robin_50_samples/RN0000108D_2.fq chunk number= 5\n\n\t/packages/bowtie/1.0.0/bowtie  /db/nibrgenome/NG00006.0/indexes/bowtie/hg19 -q -v 2 -k 10 -m 10 --best -S -p 8 -1  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000053008281_0.797636572311_pipe_5_0_1  -2  /scratch/kulkatr1//kulkatr1/yap_temp/aligner_RN0000108D_1_0000053008281_0.797636572311_pipe_5_0_2   >/test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000005.sam\n\n\tsamtools view -bhS - samtools sort -on -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000005_queryname | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000005_queryname.sam\n\n\tsamtools view -bhS - samtools sort -o -m 100000000 - /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000005_coordinate | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000005_coordinate.sam\n\nMERGE ALIGNMENT OUTPUT :\n\n\tsamtools merge -n  -  /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000002_queryname.bam /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000003_queryname.bam /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000005_queryname.bam /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000000_queryname.bam /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000001_queryname.bam /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000004_queryname.bam  | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/RN0000108D_1_queryname.sam\n\n\tsamtools merge  -  /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000005_coordinate.bam /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000001_coordinate.bam /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000000_coordinate.bam /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000002_coordinate.bam /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000003_coordinate.bam /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/aligner_RN0000108D_1_000004_coordinate.bam  | samtools view -h - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/RN0000108D_1_coordinate.sam\n\nPOSTPROCESS :\n\n\tINPUT: /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/RN0000108D_1_queryname.sam\n\n\t/packages/python/2.6.5_gnu/bin/htseq-count -s no -q  /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/RN0000108D_1_queryname.sam  /accessory_files/human-ucsc-refGene.gtf  >/test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_htseq-count.out\n\n\tINPUT: /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/RN0000108D_1_coordinate.sam\n\n\tyap_exon_count -f 1.0 -exon_coordinates_file /accessory_files/human-ucsc-final_exon_coord.bed -exon_CoordToNumber_file /accessory_files/human-ucsc-final_exon_coord_number.bed -i - -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_yap_exon_count\n\n\tjava -Xmx1g -jar /packages/picard-tools/1.89/CollectAlignmentSummaryMetrics.jar VALIDATION_STRINGENCY= SILENT I= /dev/stdin O= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_CollectAlignmentSummaryMetrics.txt IS_BISULFITE_SEQUENCED= true ASSUME_SORTED= True REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa QUIET= True\n\n\tjava -Xmx1g -jar /packages/picard-tools/1.89/QualityScoreDistribution.jar VALIDATION_STRINGENCY= SILENT I= /dev/stdin O= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_QualityScoreDistribution.txt ASSUME_SORTED= true REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa CHART= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_QualityScoreDistribution.pdf ALIGNED_READS_ONLY= true\n\n\tjava -Xmx1g -jar /packages/picard-tools/1.89/MeanQualityByCycle.jar VALIDATION_STRINGENCY= SILENT ASSUME_SORTED= true REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa I= /dev/stdin O= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_MeanQualityByCycle.txt CHART= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_MeanQualityByCycle.pdf ALIGNED_READS_ONLY= true\n\n\tjava -Xmx1g -jar /packages/picard-tools/1.89/CollectGcBiasMetrics.jar VALIDATION_STRINGENCY= SILENT I= /dev/stdin O= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_CollectGcBiasMetrics.txt SUMMARY_OUTPUT= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_CollectGcBiasMetrics_summary.txt CHART= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_CollectGcBiasMetrics.pdf ASSUME_SORTED= true REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa\n\n\tjava -Xmx1g -jar  /packages/picard-tools/1.89/CollectRnaSeqMetrics.jar VALIDATION_STRINGENCY= SILENT ASSUME_SORTED= true REF_FLAT= /db/yap/ucsc/may_02_2013/gtf/hg19/human_refflat_for_picard.gff RIBOSOMAL_INTERVALS= /db/yap/ucsc/may_02_2013/gtf/hg19/Homo_sapiens_assembly19.rRNA.interval_list STRAND_SPECIFICITY= NONE I= /dev/stdin O= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_CollectRnaSeqMetrics.txt CHART_OUTPUT= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_CollectRnaSeqMetrics.pdf REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa\n\n\t/packages/picard-tools/1.89/CalculateHsMetrics.jar VALIDATION_STRINGENCY= SILENT BAIT_INTERVALS= /accessory_files/TruSeq_exome_targeted_regions_for_picard.bed TARGET_INTERVALS= /accessory_files/TruSeq_exome_targeted_regions_for_picard.bed INPUT= /dev/stdin OUTPUT= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_CalculateHsMetrics.txt REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa\n\n\tjava -Xmx1g -jar /packages/picard-tools/1.89/CollectTargetedPcrMetrics.jar VALIDATION_STRINGENCY= SILENT AMPLICON_INTERVALS= /accessory_files/TruSeq_exome_targeted_regions_for_picard.bed TARGET_INTERVALS= /accessory_files/TruSeq_exome_targeted_regions_for_picard.bed INPUT= /dev/stdin OUTPUT= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_CollectTargetedPcrMetrics.txt REFERENCE_SEQUENCE= /db/nibrgenome/NG00006.0/fasta/hg19.fa\n\n\tINPUT: /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/RN0000108D_1_coordinate.sam\n\n\tjava -Xmx1g -jar  /packages/picard-tools/1.89/CollectInsertSizeMetrics.jar VALIDATION_STRINGENCY= SILENT ASSUME_SORTED= true I= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/RN0000108D_1_coordinate.sam O= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_CollectInsertSizeMetrics.txt H= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_CollectInsertSizeMetrics.pdf TMP_DIR= /scratch/$USER HISTOGRAM_WIDTH= 500\n\n\tINPUT: /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/RN0000108D_1_coordinate.sam\n\n\tjava -Xmx1g -jar  /packages/picard-tools/1.89/MarkDuplicates.jar VALIDATION_STRINGENCY= SILENT TMP_DIR= /scratch/$USER MAX_RECORDS_IN_RAM= 1000000 MAX_SEQUENCES_FOR_DISK_READ_ENDS_MAP= 2000 ASSUME_SORTED= true I= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/RN0000108D_1_coordinate.sam O= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_MarkDuplicates.bam METRICS_FILE= /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output/RN0000108D_1_MarkDuplicates.txt\n\n\tINPUT: /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/RN0000108D_1_coordinate.sam\n\n\t/packages/cufflinks/2.1.1/cufflinks  /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/aligner_output/RN0000108D_1_coordinate.sam -o /test_output/yap2.3_test/RN0000108D_1/no_barcode_specified/postprocess_output -p 12 -G /accessory_files/human-ucsc-refGene.gtf\n\n--------------------Analysis End Time For Workflow : yap2.3_test 2014/09/04 19:43:14--------------------</pre>\n      </code>\n    </div>\n  </div>\n</div>\n\n<h2>\n<a name=\"user-content-requirements\" class=\"anchor\" href=\"#requirements\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Requirements</h2>\n\n<p><strong>YAP only runs on Linux systems!</strong></p>\n\n<h3>Dependencies: </h3>\n\n<p>The following dependencies have to be first installed in your environment. Once installed, make sure these dependencies are added to your path.</p>\n\n<ul class=\"task-list\">\n<li>Recent versions of gcc (gcc 4.8.x is well tested)</li>\n<li>Python 2.7.7</li>\n<li>Openmpi 1.6.5</li>\n<li>Python modules:\n\n<ul class=\"task-list\">\n<li>MPI4py - 1.3</li>\n<li>PyPdf - 1.13</li>\n<li>Numpy - 1.7.1</li>\n<li>netsa-utils - 1.4.3</li>\n</ul>\n</li>\n<li>bedtools - 2.15.0</li>\n<li>samtools - 0.1.18</li>\n</ul>\n\n<h3>System Configuration:</h3>\n\n<p>   YAP provides a framework to run external tools and data, so the tools used\nin the workflows drive the system requirements. It can be installed on multicore\nlinux workstation with a decent amount of memory for small data, or on large\ncluster systems to scale optimally for large data processing. The framework has\nbeen tested extensively for <abbr title=\"Next-Generation Sequencing\">NGS</abbr>\ndata on clusters with minimum system configuration of 8-12 cores and 24-48 GB\nmemory.   </p>\n\n<h2>YAP Setup</h2>\n\n<ul class=\"task-list\">\n<li>Download the yap source from <a href=\"https://github.com/Novartis/yap/archive/master.zip\">here</a>\n</li>\n<li>\n<p>Uncompress the source directory </p>\n\n<p>for example: uncompress the directory as <code>/home/packages/YAP</code></p>\n</li>\n<li>\n<p>Set <code>YAP_HOME</code> environment variable to the source directory.</p>\n\n<p><pre><code>$ export YAP_HOME=/home/packages/YAP</code></pre></p>\n</li>\n<li>\n<p>Add bin directory to path</p>\n\n<pre><code>$ export PATH=$PATH:$YAP_HOME/bin/</code></pre>\n</li>\n<li>\n<p>Set <code>YAP_LOCAL_TEMPDIR</code>\nenvironment variable for temporary computation. For optimum performance point\nthis directory to a location which is  local to the machine. </p>\n\n<pre><code>$ export YAP_LOCAL_TEMPDIR=/scratch/username/yap_temp</code></pre>\n</li>\n</ul><p><strong>Verification</strong></p>\n\n<pre><code>$ echo $YAP_HOME\n    /home/packages/YAP\n\n$ echo $YAP_LOCAL_TEMPDIR\n    /scratch/username/yap_temp\n\n$ which yap\n    /home/packages/YAP/bin/yap\n</code></pre>\n\n<h1> <a name=\"user-content-running-a-yap-job\" class=\"anchor\"\nhref=\"#running-a-yap-job\" aria-hidden=\"true\"><span class=\"octicon\nocticon-link\"></span></a>Running a YAP job</h1>\n\n<p>Once you've set your environment, it is best to run a quick demo job to get\nthe feel of running YAP. The following section is meant to be interactive and\nhence you would need Linux account access and access to the cluster.</p>\n\n<p>After downloading the project, please see the demo configuration files in\n<code>yap/cfg</code>.</p>\n\n<p>There are 3 stages in YAP - Preprocess, Alignment and Postprocess. You can\nhave command level control of these three stages in the namesake configuration\nfiles and a workflow level control in the\n<code>workflow_configuration.</code></p>\n<table class=\"table table-striped\">\n<thead><tr>\n<th>Configuration</th>\n<th>Purpose</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>aligner_configuration</td>\n<td>bwa, bowtie, bowtie2, tophat or insert your own aligner</td>\n</tr>\n<tr>\n<td>postprocess_configuration</td>\n<td>postalignment packages, generate counts or metrics</td>\n</tr>\n<tr>\n<td>preprocess_configuration</td>\n<td>pre-alignment packages to massage your seqdata</td>\n</tr>\n<tr>\n<td>workflow_configuration</td>\n<td>manage metadata, specify input files, paths and output directories</td>\n</tr>\n<tr>\n<td>yap_sge</td>\n<td>submitting your job to the cluster</td>\n</tr>\n</tbody>\n</table><p>The demo runs a RNASeq QC and counts workflow consisting of:</p>\n\n<ul class=\"task-list\">\n<li>Preprocess: FastQC, Fastqscreen</li>\n<li>Alignment: Bowtie, both queryname and coordinate sorted</li>\n<li>Postprocess: yap junction and exon counts, Picard tools (PostQC), HTSeq (Raw counts) and Cufflinks (normalized counts)</li>\n</ul><p>We run this workflow on 2 nodes on the UGE cluster.</p>\n\n<p>To run the yap_demo job, we next need to check to see if our configuration files are correct using the command.</p>\n\n<pre><code>cd &lt;your_working directory&gt;\nyap --check workflow_configuration.cfg\n</code></pre>\n\n<p>The <code>yap --check</code>  command checks to see</p>\n\n<ul class=\"task-list\">\n<li>If all paths specified are valid</li>\n<li>If YAP finds the appropriate input files</li>\n<li>Checks for syntax errors</li>\n<li>Lists commands to be executed.</li>\n<li>Gives section-wise error/warning report.</li>\n</ul>\n\n<h2>Running the YAP job</h2>\n\n<pre><code>mpirun -n &lt;number_of_cores&gt; yap workflow_configuration.cfg\n</code></pre>\n\n<p>If you have a SGE environment, pass the number of slots into the <code>$NSLOTS</code> variable.</p>\n<script>\n$('abbr').tooltip();\n</script>\n"}